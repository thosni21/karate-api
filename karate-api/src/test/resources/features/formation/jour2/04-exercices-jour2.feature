Feature: JOUR 2 - APR√àS-MIDI - Exercices pratiques et projets (2h30)
  # üéØ Objectifs:
  # - Consolider CRUD et variables
  # - R√©soudre des probl√®mes complexes
  # - Cr√©er des workflows r√©alistes

  Background:
    * url 'http://localhost:3000'

  Scenario: PROJET 1 - Gestion d'un blog personnel
    # üìù D√âFI: Simuler la cr√©ation d'un blog
    # CONSIGNES:
    # 1. Cr√©er un profil utilisateur (pas d'API, juste variable)
    # 2. Cr√©er 3 articles de blog
    # 3. V√©rifier que tous les articles sont bien cr√©√©s
    
    * def blogOwner = 
    """
    {
      "name": "Alice Martin",
      "username": "alice_blog",
      "email": "alice@monblog.com",
      "address": {
        "street": "Blog Street",
        "suite": "Suite 1",
        "city": "WebCity",
        "zipcode": "12345",
        "geo": {
          "lat": "0.0",
          "lng": "0.0"
        }
      },
      "phone": "123-456-7890",
      "website": "alice-blog.com",
      "company": {
        "name": "Personal Blog",
        "catchPhrase": "Sharing my thoughts",
        "bs": "personal blogging"
      }
    }
    """
    
    * def articlesCreated = []

    # TODO: Cr√©er un nouveau utilisateur
    # CONSIGNE: Utiliser POST /users avec blogOwner
    # AIDE: N'oubliez pas de stocker la r√©ponse dans createdUser
    Given path '/users'
    # TODO: Compl√©ter la requ√™te
    # TODO: Compl√©ter la m√©thode
    # TODO: V√©rifier le status
    # TODO: Stocker la r√©ponse
    
    # TODO: D√©finir les articles avec l'ID du nouvel utilisateur
    # CONSIGNE: Cr√©er un array de 3 articles avec userId dynamique
    * def articles = 
    """
    [
      // TODO: Article 1 - "Mon premier article de blog"
      // TODO: Article 2 - "Les tests d'API c'est g√©nial"  
      // TODO: Article 3 - "Projet final du jour 2"
    ]
    """
    
    # TODO: Cr√©er chaque article (3 fois POST /posts)
    # CONSIGNE: Utiliser articles[0], articles[1], articles[2]
    # AIDE: Stocker chaque r√©ponse dans articlesCreated
    
    # TODO: Afficher le r√©capitulatif
    # CONSIGNE: Print le nom du blogOwner et le nombre d'articles

  Scenario: PROJET 2 - Mod√©ration de contenu
    # üìù D√âFI: Simuler la mod√©ration d'un forum
    # CONSIGNES:
    # 1. Cr√©er un post avec du contenu "probl√©matique"
    # 2. Le modifier pour le censurer
    # 3. V√©rifier que le contenu est bien censur√©
    
    * def contenuProblematique = "Ce post contient des mots interdits: spam, pub, arnaque"
    
    # TODO: D√©finir le contenu censur√©
    # CONSIGNE: Remplacer les mots interdits par des √©toiles
    * def contenuCensure = 
    
    # TODO: Cr√©er le post original
    # CONSIGNE: POST /posts avec le contenu probl√©matique
    Given path '/posts'
    # TODO: Compl√©ter la requ√™te avec title et body
    # TODO: Ajouter la m√©thode POST
    # TODO: V√©rifier le status 201
    # TODO: Stocker l'ID du post
    
    # TODO: Mod√©rer (censurer) le contenu
    # CONSIGNE: Utiliser PUT avec le contenu censur√©
    # AIDE: N'oubliez pas d'inclure l'id dans la requ√™te
    Given path '/posts/' + postId
    # TODO: Compl√©ter la requ√™te avec le nouveau contenu
    # TODO: Ajouter la m√©thode PUT
    # TODO: V√©rifier le status et le contenu censur√©

  Scenario: PROJET 3 - Statistiques de blog
    # üìù D√âFI: Analyser les donn√©es d'un blog
    # CONSIGNES:
    # 1. R√©cup√©rer tous les posts d'un utilisateur
    # 2. Compter combien il en a
    # 3. Calculer la longueur moyenne des titres
    
    * def userId = 1
    
    # TODO: R√©cup√©rer tous les posts de l'utilisateur
    # CONSIGNE: GET /posts avec param userId
    Given path '/posts'
    # TODO: Ajouter le param√®tre userId
    # TODO: Ex√©cuter la requ√™te GET
    # TODO: V√©rifier le status 200
    # TODO: Stocker la r√©ponse dans userPosts
    
    # TODO: Calculer le nombre de posts
    # AIDE: Utiliser .length sur userPosts
    * def nombrePosts = 
    
    # TODO: Calculer la longueur totale des titres
    # CONSIGNE: Utiliser une boucle for pour additionner
    * def totalLongueurTitres = 0
    # TODO: √âcrire la boucle for pour parcourir userPosts
    # TODO: Dans chaque it√©ration, ajouter userPosts[i].title.length √† totalLongueurTitres
    
    # TODO: Calculer la moyenne (arrondie)
    # AIDE: Math.round(total / nombre)
    * def longueurMoyenne = 
    
    # TODO: Afficher les statistiques
    # CONSIGNE: Print userId, nombrePosts et longueurMoyenne
    
    # TODO: V√©rifier que les r√©sultats sont positifs
    # AIDE: match avec '#? _ > 0'

  Scenario: PROJET 4 - Workflow complet de publication
    # üìù D√âFI AVANC√â: Simuler un workflow complet
    # CONSIGNES:
    # 1. Cr√©er un brouillon (draft)
    # 2. Le r√©viser (modifier)
    # 3. Le publier (marquer comme publi√©)
    # 4. V√©rifier le statut final
    
    # √âtape 1: Brouillon
    * def brouillon = 
    """
    {
      "title": "[BROUILLON] Mon article en cours",
      "body": "Contenu temporaire, √† r√©viser...",
      "userId": 1
    }
    """
    
    # TODO: Cr√©er le brouillon
    # CONSIGNE: POST /posts avec l'objet brouillon
    Given path '/posts'
    # TODO: Compl√©ter la requ√™te et m√©thode
    # TODO: V√©rifier le status et stocker l'ID
    
    # √âtape 2: R√©vision
    # TODO: D√©finir l'objet revision avec le nouvel ID
    # CONSIGNE: Changer le titre et body, garder le m√™me userId
    * def revision = 
    """
    {
      // TODO: Ajouter id, title, body et userId
    }
    """
    
    # TODO: Mettre √† jour l'article (r√©vision)
    # CONSIGNE: PUT /posts/{id} avec l'objet revision
    Given path '/posts/' + articleId
    # TODO: Compl√©ter la requ√™te PUT
    
    # √âtape 3: Publication finale
    # TODO: D√©finir l'objet publication final
    * def publication = 
    """
    {
      // TODO: Version finale avec nouveau titre et contenu
    }
    """
    
    # TODO: Publier l'article final
    # CONSIGNE: PUT avec v√©rification du titre final
    Given path '/posts/' + articleId
    # TODO: Compl√©ter la publication et v√©rifier le titre

  